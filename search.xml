<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hexo 使用来必力添加评论功能]]></title>
      <url>http://yan-1-20.github.io/2018/04/22/2018/04/22/</url>
      <content type="html"><![CDATA[<p>以前用的多说，现在换成了来必力。<br><a href="https://livere.com/" target="_blank" rel="external">来必力官网</a></p>
<p>直接注册，可能需要梯子，韩国朋友的东西。</p>
<p>然后就是安装了</p>
<p><img src="/image/2018/04/22/01.png" alt=""></p>
<p>安装的时候，需要填你的博客的网址，和你给它的昵称</p>
<p>然后会得到下面的安装代码</p>
<p><img src="/image/2018/04/22/02.png" alt=""></p>
<p>用上面的代码对 hexo theme 文件进行修改</p>
<ul>
<li>把你上面的代码全部复制到这个文件里去，如果没有这个文件新建一个即可。<br><code>/theme/yourtheme/layout/_partial/comments.ejs</code></li>
</ul>
<ul>
<li><p>修改<code>/theme/yourtheme/layout/_partial/archive.ejs</code>的内容为如下<br>（没有这个文件自己创建一个）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (theme.livere.on) &#123;</div><div class="line"> partial(&apos;comments/livere&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在 theme 的<code>_config.yml</code> 里加上如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">livere:</div><div class="line">    on: true</div><div class="line">    livere_uid: your uid</div></pre></td></tr></table></figure>
<p>其中 your uid 里在上面最初来必力给你生成的代码里 <code>data-uid</code>的内容</p>
</li>
</ul>
<p>就可以愉快的使用来必力了。  </p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归途来路，无问西东]]></title>
      <url>http://yan-1-20.github.io/2018/03/09/2018/03/09/</url>
      <content type="html"><![CDATA[<p>　　博客停刚刚一年了，从去年3月30号更新了一篇CVE的分析之后就没有更新过了，从今天开始应该会<br>断断续续的更新一些东西。<br>　　这一年来，感觉经历的太多，大三下开始的实习，到今天也快一年了。实习期间技术方面确实也学<br>了一些东西，长了不少见识，实习期间的核心姿势因为签了保密协议，所以不予公开。但是相关的一些边缘<br>自我研究的资料后面空了会放到博客上来。<br>　　继续更新博客的原因，是因为把原来的实习辞掉了。现在有一点时间可以做点闲事。加油！</p>
]]></content>
      
        
        <tags>
            
            <tag> 月升 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2017-7269：IIS6.0远程代码执行漏洞逆向分析记录]]></title>
      <url>http://yan-1-20.github.io/2017/03/30/2017/03/30/</url>
      <content type="html"><![CDATA[<h2 id="前言以及准备工作"><a href="#前言以及准备工作" class="headerlink" title="前言以及准备工作"></a>前言以及准备工作</h2><p>　　关于CVE-2017-7269,网上的大神们的分析的都很有高度，我做为一个小白，拿着这种给了exp的漏洞，我没有想太多，直接windbg和IDA动静结合，调试进行分析，不过，这样可能造成分析有些片面，毕竟是纯逆向进行分析。<br>好了，首先说说。<br>环境Windows Server 2003R2 上开启WebDAV服务的IIS6.0。<br>工具 Windbg,IDA<br>接着修改网上的EXP代码我们现在不需要完美执行这个EXP,我们需要它崩溃，所以去掉作者添加的shellcode,只保留EXP部分，如下图。<br><img src="/image/2017/03/30/2017-03-30-1.png" alt=""></p>
<p>现在进行调试，Windbg直接附加进程，上网查了查IIS的进程名称为W3WP.EXE,好的附加，然后g跑起来。接着把修改后的EXP运行。好了，如下图所示，它崩溃了。<br><img src="/image/2017/03/30/2017-03-30-2.png" alt=""><br>退出Windbg，再次附加W3WP.EXE的时候，发现已经找不到这个进程了，这是IIS应用池机制的问题，解决办法有两个<br>[1]备份虚拟机镜像<br>[2]在IIS信息服务管理器里面把网站下的任意网站右键浏览一下，W3WP.EXE就会重新启动</p>
<p>接着进行调试,这个漏洞作者是给了漏洞函数的ScStoragePathFromUrl。使用IDA静态分析吧，那么dll是那个呢，作者并没写明dll名称，但是在IIS信息服务管理器开启WebDAV服务的时候可以知道，如下图。Dll名称为httpext.dll<br><img src="/image/2017/03/30/2017-03-30-3.png" alt=""></p>
<p>我们直接把这个dll,放入IDA,加载其符号表。然后CTRL+P 查找函数，输入函数名ScStoragePathFromUrl。双击进行进行分析。<br><img src="/image/2017/03/30/2017-03-30-4.png" alt=""></p>
<p>其中很有趣地方里面有明显的内存拷贝，而且有if判断，那么是简单的栈溢出吗？<br><img src="/image/2017/03/30/2017-03-30-5.png" alt=""></p>
<p>If判断地址<br><img src="/image/2017/03/30/2017-03-30-6.png" alt=""></p>
<h2 id="漏洞原理攻击分析"><a href="#漏洞原理攻击分析" class="headerlink" title="漏洞原理攻击分析"></a>漏洞原理攻击分析</h2><p>我们继续进行动态调试，知道了dll的名称，我们先用sxe ld:httpext下加载dll时的断点。<br>通过IDA知道了ScStoragePathFromUrl这个函数的retn地址为0x673F702C,那我们直接在这个地址下断点，看看每次执行完这个函数时候栈返回地址是否被覆盖，但是不幸的是我尝试几次，返回地址没有被明显的直接覆盖，最后都会以崩溃掉。<br><img src="/image/2017/03/30/2017-03-30-7.png" alt=""><br>好像直接观察堆栈并不能看出什么来，换个思路，完全从逆向的角度分析，先不断下断点定位崩溃函数，看函数崩溃的原因是什么。进过几次的断点后，定位到了ScStoragePathFromUrl内部的一个函数ScStripAndCheckHttpPrefix，这个函数代码如下。<br><img src="/image/2017/03/30/2017-03-30-8.png" alt=""><br>没有错，这个函数调用了虚函数，那么这个洞是简单的堆溢出吗？<br>再次进行调试，这次进行大量的逆向数据记录，希望从数据的变化中分析出这个洞的成因到底是什么。<br>首先我们要确定一下我们的要关注的数据什么？(地址通过IDA得到)<br>[1]内存拷贝 代码地址 0x673F6F99<br>[2] 判断是否进行数据拷贝的代码地址 代码地址 0x673F6F55<br>于是windbg下断点，执行情况如下<br><img src="/image/2017/03/30/2017-03-30-9.png" alt=""><br>可以发现这个数据拷贝并不会每次进入ScStoragePathFromUrl函数都会进行拷贝，而且拷贝次数只有3次，分别是第二调用ScStoragePathFromUrl函数，第三调用ScStoragePathFromUrl函数，第五调用ScStoragePathFromUrl函数（其实没进行拷贝的调用也很重要），好吧，既然拷贝了三次数据，那么就下断点进行查看到底拷贝了什么数据，对堆栈进行了什么的影响吧。</p>
<p>　　再进入windbg,只对内存拷贝进行下断点，并且每次跟完全部的拷贝，<br>第一次拷贝的结果如下（代码太多，不全部展示）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">.text:673F6F99                 mov     edi, [ebp-450]</div><div class="line">//ebp=0130f798  ebp-450h=0130f348 [ebp-450h]=0130f804  edi=0130f804</div><div class="line">.text:673F6F9F                 lea     eax, [esi+esi]</div><div class="line">// esi=00000012 eax=00000024</div><div class="line">.text:673F6FA2                 mov     ecx, eax       //ecx=00000024</div><div class="line">.text:673F6FA4                 mov     edx, ecx       //edx=00000024</div><div class="line">.text:673F6FA6                 shr     ecx, 2         //ecx=00000009</div><div class="line">.text:673F6FA9                 lea     esi, [ebp-43C]  </div><div class="line">//ebp-43Ch=0130f35c  esi=0130f35ch</div><div class="line">.text:673F6FAF                 rep movsd             </div><div class="line">.text:673F6FAF     ; *                                  </div><div class="line">.text:673F6FAF     ; * rep mov [edi],[esi] edi=0130f804  esi=0130f35c    ebp=0130f798</div><div class="line">.text:673F6FAF     ; * ecx 的次数为9</div><div class="line">.text:673F6FAF     ;   结束时edi=0130f828  esi=0130f380  </div><div class="line">.text:673F6FAF                                         ; /</div><div class="line">.text:673F6FB1                 mov     ecx, edx    		</div><div class="line">//edx=24h ecx=24h</div><div class="line">.text:673F6FB3                 mov     edx, [ebp-22Ch]</div><div class="line">//ebp= 0130f798    ebp-22Ch=0130f56c  edx=[0130f56c]=0</div><div class="line">.text:673F6FB9                 and     ecx, 3 			//ecx=0</div><div class="line">.text:673F6FBC                 rep movsb               ; /</div><div class="line">.text:673F6FBC                                         ; *</div><div class="line">.text:673F6FBC                                         ; *ecx=0 没有拷贝</div><div class="line">.text:673F6FBC                                         ; *</div><div class="line">.text:673F6FBC                                         ; /</div><div class="line">.text:673F6FBE                 mov     esi, [ebp-444h]</div><div class="line">// ebp-444h=0130f354    [ebp-444h]=0067cd38 esi=0067cd38</div><div class="line">.text:673F6FC4                 sub     ebx, edx        </div><div class="line"> //ebx=00000097h  edx=00000000h  ebx=00000097h</div><div class="line">.text:673F6FC6                 lea     esi, [esi+edx*2] //esi=0067cd38</div><div class="line">.text:673F6FC9                 mov     edx, [ebp-450h]  </div><div class="line">//ebp-450h=0130f34</div><div class="line">//edx=0130f804</div><div class="line">//[ebp-450h]=0130f804</div><div class="line">.text:673F6FCF                 lea     edi, [eax+edx]   </div><div class="line">//eax=24h  edx=0130f804  eax+edx=0130f828</div><div class="line">/</div><div class="line">*</div><div class="line">*注意这个eax+edx地址就是我们上面拷贝的edi结束数据地址</div><div class="line">*所以edi=edi原来的结束地址</div><div class="line">/</div><div class="line">.text:673F6FD2                 lea     ecx, [ebx+ebx+2] //ecx=00000130h</div><div class="line">.text:673F6FD6                 mov     eax, ecx   //eax=00000130h</div><div class="line">.text:673F6FD8                 shr     ecx, 2     //ecx=0000004ch</div><div class="line">.text:673F6FDB                 rep movsd               </div><div class="line">; /esi=0067cd38h edi=0130f828</div><div class="line">.text:673F6FDB             ; *</div><div class="line">.text:673F6FDB             ; *</div><div class="line">.text:673F6FDB             ; *</div><div class="line">.text:673F6FDB             ; *拷贝前ecx=4c edi=0130f828 esi=0067cd38</div><div class="line">.text:673F6FDB             ; *拷贝后edi=0130f958=ebp+1C0h</div><div class="line">.text:673F6FDB                                         ; *esi=0067ce68</div><div class="line">.text:673F6FDB                                         ; /</div><div class="line">.text:673F6FDD                 mov     ecx, eax</div><div class="line">.text:673F6FDF                 and     ecx, 3</div><div class="line">.text:673F6FE2                 rep movsb               ; /</div><div class="line">.text:673F6FE2                                         ; *</div><div class="line">.text:673F6FE2                                         ; *ecx=0 拷贝没有执行</div><div class="line">.text:673F6FE2    </div><div class="line">                                     ; /</div></pre></td></tr></table></figure>
<p>第一次拷贝的数据范围<br><code>edi 0130f804~0130f958</code></p>
<p>（第二次和第三次执行的时候edi的地址会大改，但是篇幅的原因，不能全部展示）<br>现在讲讲通过上面的代码再结合IDA，Windbg，我自己找到数据关系。<br>一共三次大内存拷贝，每次进行一次大内存拷贝时，有4次小拷贝，其中有两次不会拷贝，而另外进行拷贝的两次的地址edi是连续的，而esi是不连续的。<br>Edi的地址如果在某次大拷贝的时候变成一个对象的地址，然后进行拷贝，是不是就可以利用了呢？原作者也确实这么做了。<br>三次大内存拷贝的edi的地址变化范围如下：</p>
<blockquote>
<p><code>第一次拷贝的数据edi：0x0130f804~0x0130f958</code><br><code>第二次拷贝的数据edi：0x680312c0~0x68031464</code><br><code>第三次拷贝的数据edi：0x0130fab4~0x0130fc08</code></p>
</blockquote>
<p>通过数据好像看起来第一次和第三次好像是栈溢出。第二次是堆溢出<br>但是edi,esi的值是怎么被修改的，edi的值来自哪里？Esi的值来自哪里，这个问题需要弄明白。<br>通过IDA，和windbg,我找到了这些代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">edi 值来源[ebp-450]     .text:673F6F99                 mov     edi, [ebp-450]</div><div class="line">[ebp-450] 来源eax      .text:673F6C9B                 mov     [ebp-450], eax</div><div class="line">eax 来源 [ebp+8]        .text:673F6C93               mov   eax,dword ptr [ebp+8]</div><div class="line">/</div><div class="line">*</div><div class="line">*前两次的ebp没有变化都是0130f798</div><div class="line">*所以ebp+8地址不变0130f7a0</div><div class="line">/</div></pre></td></tr></table></figure>
<p>通过看上面的第一次拷贝的范围可以知道，第二次开始的edi(堆地址)的来源地址0130f7a0，它并没有在第一次拷贝的范围内，但是这个地址就不能通过别的方法修改吗？<br>通过继续跟踪函数我找到了这条指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eax=0130f800 ebx=0067b508 ecx=00675740 edx=0067ce78 esi=00000000 edi=77ba8ef2</div><div class="line">eip=673e9461 esp=0130f7a4 ebp=0130f7ac iopl=0         nv up ei pl nz na po nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</div><div class="line">httpext!CMethUtil::ScStoragePathFromUrl+0x10:</div><div class="line">673e9461 ff750c          push    dword ptr [ebp+0Ch]  ss:0023:0130f7b8=680312c0</div></pre></td></tr></table></figure></p>
<p>当前的esp=0130f7a4,push也就是在给0130f7a0赋值</p>
<p>而ebp+0Ch =0x0130f7b8来自于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eax=0067003c ebx=0067b508 ecx=00000000 edx=00000026 esi=0067cb38 edi=680312c0</div><div class="line">eip=673f54df esp=0130f7bc ebp=0130fc34 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!HrCheckIfHeader+0x1b9:</div><div class="line">673f54df 57              push    edi</div></pre></td></tr></table></figure></p>
<p>Edi来自于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0:007&gt;</div><div class="line">eax=680312be ebx=0067b508 ecx=680312c0 edx=0130f804 esi=00000000 edi=77ba8ef2</div><div class="line">eip=673f54b1 esp=0130f7c0 ebp=0130fc34 iopl=0         nv up ei pl nz ac po nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212</div><div class="line">httpext!HrCheckIfHeader+0x18b:</div><div class="line">673f54b1 8bbdd8fcffff    mov     edi,dword ptr [ebp-328h] ss:0023:0130f90c=680312c0</div></pre></td></tr></table></figure></p>
<p>跟到了这里原来数据来源是0130f90c，结合第一次拷贝的数据范围edi：0x0130f804~0x0130f958可以知道，这个地址就是拷贝进去的数据。（这里由于篇幅有限只分析，怎么通过第一次拷贝的数据，修改第二次将进行拷贝的edi的值，第二次的拷贝怎么修改第三次的edi值类推）</p>
<p>那么ESI是什么呢<br>通过几次再内存中的查看<br>[1]第一次拷贝前的esi指向的内存内容<br><img src="/image/2017/03/30/2017-03-30-10.png" alt=""><br>[2]第二次拷贝前的esi指向的内存内容<br><img src="/image/2017/03/30/2017-03-30-11.png" alt=""><br>[3]第三次拷贝前的esi指向的内存内容<br><img src="/image/2017/03/30/2017-03-30-12.png" alt=""><br>可以知道esi的内容就只想我们发送数据的地址。<br>好了，我们现在能知道原作者通过第一次的溢出，使第二次的edi,变成自构造的对象堆地址，进行了第二次堆溢出，那么第三次溢出的作用是什么？<br>第三次拷贝的数据范围edi：0x0130fab4~0x0130fc08<br>下面这条指令是给ecx(this指针)赋值的，此时的ebp-14h=0130fbbc在第三次的溢出范围。而且结合第二次拷贝的数范围据edi：0x680312c0~0x68031464可以知道现在赋值的ecx就是第二次拷贝的起始地址。</p>
<p>//ecx值来源栈地址 0130f960内容 -&gt;变成680312c0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">673f578f ff75ec          push    dword ptr [ebp-14h]  ss:0023:0130fbbc=680312c0</div></pre></td></tr></table></figure></p>
<p>接下来在执行虚函数时ecx已经是构造的exp的地址<br><img src="/image/2017/03/30/2017-03-30-13.png" alt=""><br>进入之后发现虚函数的内容如下<br><img src="/image/2017/03/30/2017-03-30-14.png" alt=""><br>把ecx赋值给esp，retn后，就从对象开始执行，并进行ROP，绕过DEP<br><img src="/image/2017/03/30/2017-03-30-15.png" alt=""></p>
<h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>最后拷贝数据的大小从哪里来的？<br>进行每次大拷贝的第二次拷贝的ecx作为循环的次数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.text:673F6FD2 ? ? ? ? ? ? ? ? lea ? ? ecx, [ebx+ebx+2]</div><div class="line">.text:673F6FD6 ? ? ? ? ? ? ? ? mov ? ? eax, ecx ? //eax=00000130h</div><div class="line">.text:673F6FD8 ? ? ? ? ? ? ? ? shr ? ? ecx, 2 ? ? //ecx=0000004ch</div><div class="line">.text:673F6FDB ? ? ? ? ? ? ? ? rep movsd ? ? ? ? ? ? ? ; /esi=0067cd38h edi=0130f828</div></pre></td></tr></table></figure></p>
<p>而ecx的值的来自于ebx（edx总为0）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.text:673F6FC4 ? ? ? ? ? ? ? ? sub ? ? ebx, edx</div></pre></td></tr></table></figure></p>
<p>ebx来自eax<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.text:673F6CF0 ? ? ? ? ? ? ? ? mov ? ? ebx, eax</div></pre></td></tr></table></figure></p>
<p>eax来自 <code>ds:__imp__wcslen</code>返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;str 也就是我们每次大拷贝的第二次拷贝的esi的数据源</div><div class="line">.text:673F6CE8 ? ? ? ? ? ? ? ? push ? ?eax ? ? ? ? ? ? ; Str</div><div class="line">.text:673F6CE9 ? ? ? ? ? ? ? ? call ? ?ds:__imp__wcsle</div></pre></td></tr></table></figure></p>
<p>所以可以看出它是以数据的大小作为我们拷贝数据的大小，并没有拷贝大小限制，导致溢出。</p>
<p>ps:分析了半天，如果说，它为什么了去了shellcode就会崩，其实崩的地址就是第二次拷贝的数据末尾+0x4,崩的原因是当执行到的第二次拷贝的数据末尾+0x4地址时，它的内容为0x0000，这个硬编码对应汇编代码</p>
<p><code>add byte ptr [eax],al</code><br>因为eax的值指向地址无效，所以崩溃。<br>其实这个位置本来该是shellcode的起始地址(执行到这里已经关闭DEP可以顺利执行数据代码了)，，因为我们去掉了shellcode,并没有任何数据，以地址访问异常导致崩溃。</p>
]]></content>
      
        
        <tags>
            
            <tag> Binary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[旧年辞，新年逢]]></title>
      <url>http://yan-1-20.github.io/2016/12/31/2016/12/31/</url>
      <content type="html"><![CDATA[<h1 id="旧年辞，新年逢"><a href="#旧年辞，新年逢" class="headerlink" title="旧年辞，新年逢"></a>旧年辞，新年逢</h1><h2 id="0x01-gt-2016的总结"><a href="#0x01-gt-2016的总结" class="headerlink" title="0x01-&gt;2016的总结"></a>0x01-&gt;2016的总结</h2><p>　　　对于2016年，对我自己来说是变化的一年，无论是思想上的提升，还是有关二进制逆向的提升（-…#）以前的迷茫疑惑彻底没有了，只有脚下这片该走的路。上半年学了半年安卓开发和逆向，下半年开始学windows的CVE复现，刚好泉哥的书又在暑假的时候出版了，可谓下半年是顺风顺水，这种学习的状态一直持续到11月左右，11月到12月这段时间我给自己放了1个月的假，这个一个月我不在是埋头苦干，而是在玩，是的，在玩，我因为自己个人的原因，在初中时期有巨大的网瘾，导致了高中的时候（我一生中最重要的阶段）我失去了很多了，我高中毕业后我开始讨厌游戏，因为它我失去了很多。<br><br>　　　那为什么我又要开始玩游戏，首先我不是主动为了游戏去玩游戏，因为我发现，这个时代的年轻已经不像老一辈大多数都有烟瘾，习惯用烟来搭讪用上根烟来拉近关系，他们用的是游戏，虽然游戏害人不假，但是现在是大势所趋，需要用游戏来拉近下和人的关系。<br>　　　同时在这个1个月我也在思考，自己的方式到底正不正确，是不是走在了我自己想走的路上，我惊讶的发现我其实已经越走越远。</p>
<h2 id="0x02-gt-2017的展望"><a href="#0x02-gt-2017的展望" class="headerlink" title="0x02-&gt;2017的展望"></a>0x02-&gt;2017的展望</h2><p>　　　辛亏有了16年年末这放松的一个月，我可以独立的思考，而不是全身心的投入学习，让我对现状有了一个更加清晰的认识。我想我该走的路，越来越清晰了，新年真好啊。<br>　　　转眼已经是第四个年头了，离大学毕业的第5个年头只剩下一年了，只能无力的说句加油！<br>                <br>　　　　　　　　　　　　　　　(+…#)<br><br>　　　<img src="/image/2016-12-31-1.jpg" alt=""><br>      <br></p>
]]></content>
      
        
        <tags>
            
            <tag> LIFE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2012-003]]></title>
      <url>http://yan-1-20.github.io/2016/11/13/2016/11/13/</url>
      <content type="html"><![CDATA[<h1 id="CVE-2012-003-Microsoft-Winodws-Media-Player-Wimm-dll-Heap-Overflow"><a href="#CVE-2012-003-Microsoft-Winodws-Media-Player-Wimm-dll-Heap-Overflow" class="headerlink" title="CVE-2012-003 Microsoft Winodws Media Player Wimm.dll Heap Overflow"></a>CVE-2012-003 Microsoft Winodws Media Player Wimm.dll Heap Overflow</h1><h2 id="0x1-序"><a href="#0x1-序" class="headerlink" title="0x1 序"></a>0x1 序</h2><p>　　　　因为这个CVE是跟着泉哥的书复现学习的，所以具体的细节我就不多说，本来就按这泉哥的思路走的，也没必要把他的操作模仿一次。我只想记录我自己对这个CVE的体会。肯定有错的理解，希望以后能改正。</p>
<h2 id="0x2-Exploit"><a href="#0x2-Exploit" class="headerlink" title="0x2 Exploit"></a>0x2 Exploit</h2><p>　　　　这个CVE相信看了泉哥的那份分析，都清楚溢出点（其实这个Exploit也不能说是靠溢出）的原因，就是对事件0x90的控制没对，导致了后面代码没有跳转继续向下执行，而跳转之下的代码，是对内存有一个操作。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INC AL</div><div class="line">MOV BYTE PTR <span class="symbol">DS:</span>[ESI],AL</div></pre></td></tr></table></figure><br>太厉害了，仅仅靠这一个操作，就能构造出一个Exploit，一开始的poc会导致崩溃，崩溃的原因是对分配较小的堆空间，进行了越界操作，开了页堆后触发异常导致崩溃。而这个利用却是这样的，直接堆喷射，然后释放，堆有一个机制，分配出去的空间，在被释放后，再次请求alloc，得到地址没有特殊情况很可能，就是上面说的释放的地址。里面的数据并没有清除。之后进行poc越界操作（包括请求alloc,这时候就可能得到我们上面说那种情况，得到了一个我们故意释放的地址），但是由于堆喷射，这个地址变的可以访问，就可以对我们故意放在这个地址的数据进行一个自增操作。而我们构造的堆喷射在这个个地址的数据，就是jscript的类型定义值，我们这里让其属性值（8对应的string，这个对象在poc是被赋值了的，这个值在对象为string时对应着字符串数据，在对象为object时，为虚表指针）加1，变成objec类型，在poc里有一个循环检查这个对象是否变成了Object类型，如果是就调用它的一个方法，这个方法正是虚方法，是的我们已经控制了虚表指针，这个虚方法也就是我们说是哪里就是哪里了。</p>
]]></content>
      
        
        <tags>
            
            <tag> MS-Heap-Overflow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C#实现SHA-256--光棍节前的代码]]></title>
      <url>http://yan-1-20.github.io/2016/11/10/2016/11/10/</url>
      <content type="html"><![CDATA[<h1 id="0x01莫名其妙的学校作业"><a href="#0x01莫名其妙的学校作业" class="headerlink" title="0x01莫名其妙的学校作业"></a>0x01莫名其妙的学校作业</h1><p>　　　　这个代码，并不是本人想写的，是的，莫名其妙的作业，类似于小毕业设计的东西。。。。代码写完还有3000字的报告。。。。。。莫名奇妙。</p>
<h1 id="0x02代码实现"><a href="#0x02代码实现" class="headerlink" title="0x02代码实现"></a>0x02代码实现</h1><p>　　　　这个加密算法，我当时想的简单，不就是SHA-256嘛，网上代码肯定一大堆，我随便一搜一份就行，悲伤那么大，网上的全身调用库函数实现的，唯一一篇可以参考的c语言实现的，莫名的他下标访问越界的不是一点半点，直接用负数索引元素。但是除去访问越界。他的代码是炒鸡牛逼的，50行就实现了整个SHA-256，代码风格及其牛逼（很难读懂）。</p>
<h1 id="0x03自食其力"><a href="#0x03自食其力" class="headerlink" title="0x03自食其力"></a>0x03自食其力</h1><p>　　　　没办法，找不到代码参考就只能自己写咯，参考密码学标准FIPS180-2</p>
<blockquote>
<p><a href="http://wenku.baidu.com/link?url=1VofDnehD0jIFObdvK3wWHklkUVg_hOsOjAurVQjUViee8uHRYknwu70gqD0zQ7I8umfZ6B-4Z5rj-0BTw89CpIo5tB9_fq3Xe6aUmk7bVm" target="_blank" rel="external">http://wenku.baidu.com/link?url=1VofDnehD0jIFObdvK3wWHklkUVg_hOsOjAurVQjUViee8uHRYknwu70gqD0zQ7I8umfZ6B-4Z5rj-0BTw89CpIo5tB9_fq3Xe6aUmk7bVm</a></p>
</blockquote>
<p>　　　　下面上代码,一个main,一个类，代码并不简洁，并不规范，（可读性比较高）以后想参考的学弟学妹们有福。大牛就不要嫌弃了</p>
<p>　　　加密类的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line"></div><div class="line">namespace SHA_256</div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">encode</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">private</span> uint A, B, C, D, E, F, G, H,T1, T2;</div><div class="line">        <span class="keyword">private</span> uint[] K = <span class="keyword">new</span> uint[<span class="number">64</span>] &#123;</div><div class="line">        <span class="number">0x428a2f98</span>, <span class="number">0x71374491</span>, <span class="number">0xb5c0fbcf</span>, <span class="number">0xe9b5dba5</span>, <span class="number">0x3956c25b</span>, <span class="number">0x59f111f1</span>, <span class="number">0x923f82a4</span>, <span class="number">0xab1c5ed5</span>,</div><div class="line">        <span class="number">0xd807aa98</span>, <span class="number">0x12835b01</span>, <span class="number">0x243185be</span>, <span class="number">0x550c7dc3</span>, <span class="number">0x72be5d74</span>, <span class="number">0x80deb1fe</span>, <span class="number">0x9bdc06a7</span>, <span class="number">0xc19bf174</span>,</div><div class="line">        <span class="number">0xe49b69c1</span>, <span class="number">0xefbe4786</span>, <span class="number">0x0fc19dc6</span>, <span class="number">0x240ca1cc</span>, <span class="number">0x2de92c6f</span>, <span class="number">0x4a7484aa</span>, <span class="number">0x5cb0a9dc</span>, <span class="number">0x76f988da</span>,</div><div class="line">        <span class="number">0x983e5152</span>, <span class="number">0xa831c66d</span>, <span class="number">0xb00327c8</span>, <span class="number">0xbf597fc7</span>, <span class="number">0xc6e00bf3</span>, <span class="number">0xd5a79147</span>, <span class="number">0x06ca6351</span>, <span class="number">0x14292967</span>,</div><div class="line">        <span class="number">0x27b70a85</span>, <span class="number">0x2e1b2138</span>, <span class="number">0x4d2c6dfc</span>, <span class="number">0x53380d13</span>, <span class="number">0x650a7354</span>, <span class="number">0x766a0abb</span>, <span class="number">0x81c2c92e</span>, <span class="number">0x92722c85</span>,</div><div class="line">        <span class="number">0xa2bfe8a1</span>, <span class="number">0xa81a664b</span>, <span class="number">0xc24b8b70</span>, <span class="number">0xc76c51a3</span>, <span class="number">0xd192e819</span>, <span class="number">0xd6990624</span>, <span class="number">0xf40e3585</span>, <span class="number">0x106aa070</span>,</div><div class="line">        <span class="number">0x19a4c116</span>, <span class="number">0x1e376c08</span>, <span class="number">0x2748774c</span>, <span class="number">0x34b0bcb5</span>, <span class="number">0x391c0cb3</span>, <span class="number">0x4ed8aa4a</span>, <span class="number">0x5b9cca4f</span>, <span class="number">0x682e6ff3</span>,</div><div class="line">        <span class="number">0x748f82ee</span>, <span class="number">0x78a5636f</span>, <span class="number">0x84c87814</span>, <span class="number">0x8cc70208</span>, <span class="number">0x90befffa</span>, <span class="number">0xa4506ceb</span>, <span class="number">0xbef9a3f7</span>, <span class="number">0xc67178f2</span>,</div><div class="line">         &#125;;</div><div class="line"></div><div class="line">        uint H0 = <span class="number">0x6a09e667</span>u, H1 = <span class="number">0xbb67ae85</span>u, H2 = <span class="number">0x3c6ef372</span>u, H3 = <span class="number">0xa54ff53a</span>u;</div><div class="line">        uint H4 = <span class="number">0x510e527f</span>u, H5 = <span class="number">0x9b05688c</span>u, H6 = <span class="number">0x1f83d9ab</span>u, H7 = <span class="number">0x5be0cd19</span>u;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_ROTL</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (((a &gt;&gt; (<span class="number">32</span> - b)) &amp; (<span class="number">0x7fffffff</span> &gt;&gt; (<span class="number">31</span> - b))) | (a &lt;&lt; b)); &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_SR</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> ((a &gt;&gt; b) &amp; (<span class="number">0x7fffffff</span> &gt;&gt; (b - <span class="number">1</span>)));  &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_Ch</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123; <span class="keyword">return</span> ((x&amp;y)^((~x)&amp;z));  &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_Maj</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>&#123; <span class="keyword">return</span> ((x&amp;y)^(x&amp;z)^(y&amp;z));  &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_E0</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (SHA256_ROTL(x, <span class="number">30</span>) ^ SHA256_ROTL(x, <span class="number">19</span>) ^ SHA256_ROTL(x, <span class="number">10</span>)); &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_E1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (SHA256_ROTL(x, <span class="number">26</span>) ^ SHA256_ROTL(x, <span class="number">21</span>) ^ SHA256_ROTL(x, <span class="number">7</span>));  &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_O0</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (SHA256_ROTL(x, <span class="number">25</span>) ^ SHA256_ROTL(x, <span class="number">14</span>) ^ SHA256_SR(x, <span class="number">3</span>));  &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SHA256_O1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (SHA256_ROTL(x, <span class="number">15</span>) ^ SHA256_ROTL(x, <span class="number">13</span>) ^ SHA256_SR(x, <span class="number">10</span>));      &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FillDate</span><span class="params">(<span class="keyword">byte</span>[] input, <span class="keyword">int</span> datelength, <span class="keyword">byte</span>[] output,<span class="keyword">int</span> encodenumber)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> zerobit = (<span class="number">448</span> - (datelength * <span class="number">8</span> + <span class="number">1</span>) % <span class="number">512</span>) - <span class="number">7</span>;</div><div class="line">            <span class="keyword">int</span> i,datelengthbitnumber= datelength * <span class="number">8</span>;</div><div class="line">                <span class="keyword">if</span> (zerobit &lt; <span class="number">0</span>)</div><div class="line">                    zerobit = <span class="number">512</span> + zerobit;</div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; datelength; i++)</div><div class="line">                &#123;</div><div class="line">                    output[i] = input[i];</div><div class="line">                &#125;</div><div class="line">                output[i++] = (<span class="keyword">byte</span>)<span class="number">128</span>;</div><div class="line">                <span class="keyword">int</span> tmpi = i;</div><div class="line">                <span class="keyword">for</span> (; i &lt; zerobit / <span class="number">8</span>; i++)</div><div class="line">                    output[i] = (<span class="keyword">byte</span>)<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; ; k++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (datelengthbitnumber == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                output[<span class="number">63</span> + <span class="number">64</span> * encodenumber-k] =(<span class="keyword">byte</span>) (datelengthbitnumber &amp; <span class="number">0xFF</span>);</div><div class="line">                datelengthbitnumber &gt;&gt;= <span class="number">8</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetMbyte</span><span class="params">(<span class="keyword">byte</span>[] resource,<span class="keyword">byte</span>[] M,<span class="keyword">int</span> number,<span class="keyword">int</span> i)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</div><div class="line">                M[j] = resource[j+i*<span class="number">64</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Getmint</span><span class="params">(<span class="keyword">byte</span>[] resource, uint[] M, <span class="keyword">int</span> number)</span></span></div><div class="line">        &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</div><div class="line">                &#123;</div><div class="line">                    M[ j] = (uint)(resource[ j * <span class="number">4</span>]&lt;&lt;<span class="number">24</span> | resource[j * <span class="number">4</span>+<span class="number">1</span>] &lt;&lt; <span class="number">16</span> |resource[  j * <span class="number">4</span>+<span class="number">2</span>] &lt;&lt; <span class="number">8</span> | resource[ j * <span class="number">4</span>+<span class="number">3</span>]);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialW</span><span class="params">(uint[] resource, uint[] M, <span class="keyword">int</span> number)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j;</div><div class="line">                <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</div><div class="line">                &#123;</div><div class="line">                    M[ j] = resource[j];</div><div class="line"></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (; j &lt; <span class="number">64</span>; j++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> a = SHA256_O1((<span class="keyword">int</span>)M[j - <span class="number">2</span>]);</div><div class="line">                    <span class="keyword">int</span> c = (<span class="keyword">int</span>)M[ j - <span class="number">7</span>];</div><div class="line">                    <span class="keyword">int</span> b = SHA256_O0((<span class="keyword">int</span>)M[ j - <span class="number">15</span>]);</div><div class="line">                    <span class="keyword">int</span> d = (<span class="keyword">int</span>)M[ j - <span class="number">16</span>];</div><div class="line">                    M[ j] =(uint)( SHA256_O1((<span class="keyword">int</span>)M[ j - <span class="number">2</span>]) + M[ j - <span class="number">7</span>] + SHA256_O0((<span class="keyword">int</span>)M[j - <span class="number">15</span>]) + M[j-<span class="number">16</span>]);</div><div class="line">                &#125;</div><div class="line">            printW(M);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialregister</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            A = H0; B = H1; C = H2; D = H3; E = H4; F = H5; G = H6; H = H7;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> bool <span class="title">IntToByteArray</span><span class="params">(uint m,  <span class="keyword">byte</span>[] arry)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (arry == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (arry.Length &lt; <span class="number">4</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            arry[<span class="number">0</span>] = (<span class="keyword">byte</span>)(m &amp; <span class="number">0xFF</span>);</div><div class="line">            arry[<span class="number">1</span>] = (<span class="keyword">byte</span>)((m &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>);</div><div class="line">            arry[<span class="number">2</span>] = (<span class="keyword">byte</span>)((m &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>);</div><div class="line">            arry[<span class="number">3</span>] = (<span class="keyword">byte</span>)((m &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endcode</span><span class="params">(uint[] M,<span class="keyword">int</span> number)</span></span></div><div class="line">        &#123;</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</div><div class="line">                &#123;</div><div class="line">                    T1 =(uint) (H + SHA256_E1((<span class="keyword">int</span>)E) + SHA256_Ch((<span class="keyword">int</span>)E, (<span class="keyword">int</span>)F, (<span class="keyword">int</span>)G) + K[i] + M[i]);</div><div class="line">                    T2 = (uint)(SHA256_E0((<span class="keyword">int</span>)A) + SHA256_Maj((<span class="keyword">int</span>)A, (<span class="keyword">int</span>)B, (<span class="keyword">int</span>)C));</div><div class="line">                    H = G; G = F; F = E; E = D + T1; D = C; C = B; B = A; A = T1 + T2;</div><div class="line">                    Console.WriteLine(<span class="string">"t=&#123;0&#125; A:&#123;1&#125;  B:&#123;2&#125;  C:&#123;3&#125; D:&#123;4&#125; E:&#123;5&#125; F:&#123;6&#125; G:&#123;7&#125; H:&#123;8&#125;"</span>,i.ToString(), addZero(A), addZero(B),addZero(C), addZero(D),</div><div class="line">                &#125;</div><div class="line">                H0 += A; H1 += B; H2 += C; H3 += D; H4 += E; H5 += F; H6 += G; H7 += H;</div><div class="line">                Console.WriteLine(<span class="string">"\n\n"</span>);</div><div class="line">                Console.WriteLine(<span class="string">"T H0:&#123;0&#125;  H1:&#123;1&#125;  H2:&#123;2&#125; H3:&#123;3&#125; H4:&#123;4&#125; H5:&#123;5&#125; H6:&#123;6&#125; H7:&#123;7&#125;"</span>,</div><div class="line">                addZero(H0), addZero(H1), addZero(H2), addZero(H3), addZero(H4), addZero(H5), addZero(H6), addZero(H7));</div><div class="line">                Console.WriteLine(<span class="string">"\n\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changHsbit</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">byte</span>[] tmp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</div><div class="line">            IntToByteArray(H0,tmp);</div><div class="line">            H0 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">            IntToByteArray(H1, tmp);</div><div class="line">            H1 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">            IntToByteArray(H2, tmp);</div><div class="line">            H2 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">            IntToByteArray(H3, tmp);</div><div class="line">            H3 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">            IntToByteArray(H4, tmp);</div><div class="line">            H4 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">            IntToByteArray(H5, tmp);</div><div class="line">            H5 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">            IntToByteArray(H6, tmp);</div><div class="line">            H6 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">            IntToByteArray(H7, tmp);</div><div class="line">            H7 = (uint)(tmp[<span class="number">3</span>] &lt;&lt; <span class="number">24</span> | tmp[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | tmp[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | tmp[<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> string <span class="title">addZero</span><span class="params">(uint W)</span></span></div><div class="line">        &#123;</div><div class="line">            string tmp1 = <span class="string">""</span>, tmp2;</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">            <span class="keyword">if</span> (W &lt; <span class="number">0x10000000</span>)</div><div class="line">            &#123;</div><div class="line">                tmp2 = W.ToString(<span class="string">"x"</span>);</div><div class="line">                len = tmp2.Length;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span> - len; j++)</div><div class="line">                    tmp1 += <span class="string">'0'</span>;</div><div class="line">                tmp1 += W.ToString(<span class="string">"x"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> W.ToString(<span class="string">"x"</span>);</div><div class="line">            <span class="keyword">return</span> tmp1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printW</span><span class="params">(uint [] W)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">                    Console.WriteLine(<span class="string">" W[&#123;0&#125;]:   0x&#123;1&#125;"</span>, i.ToString(), addZero(W[i]));</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            Console.WriteLine(<span class="string">"\n\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printencode</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            changHsbit();</div><div class="line">            Console.WriteLine(<span class="string">"SHA-256 encode: &#123;0&#125;  &#123;1&#125;  &#123;2&#125; &#123;3&#125; &#123;4&#125; &#123;5&#125; &#123;6&#125; &#123;7&#125;"</span>,</div><div class="line">                addZero(H0), addZero(H1), addZero(H2), addZero(H3), addZero(H4), addZero(H5), addZero(H6), addZero(H7));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>　　　主函数 调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Text;</div><div class="line">using SHA_256;</div><div class="line"></div><div class="line">namespace SHA_256</div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></div><div class="line">        &#123;</div><div class="line">            Encoding enc = <span class="keyword">new</span> UTF8Encoding(<span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">            <span class="comment">//C#默认unicode编码，上面的类可以把其转换为多字节编码</span></div><div class="line">            encode MYSHA = <span class="keyword">new</span> encode();</div><div class="line">            Console.WriteLine(<span class="string">"input you data encode sha-256:"</span>);</div><div class="line">            string str = Console.ReadLine();</div><div class="line">            <span class="keyword">byte</span>[] bte = enc.GetBytes(str);</div><div class="line">            <span class="keyword">int</span> encodedatelength = bte.Length;</div><div class="line">            <span class="keyword">int</span> encodenumber = <span class="number">0</span>;</div><div class="line">            <span class="keyword">byte</span>[] MM;</div><div class="line">            <span class="keyword">if</span> (encodedatelength &gt;= <span class="number">56</span>)</div><div class="line">            &#123;</div><div class="line">                encodenumber = encodedatelength / <span class="number">56</span>;</div><div class="line">            &#125;</div><div class="line">            MM = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span> * (encodenumber + <span class="number">1</span>)];</div><div class="line">            MYSHA.FillDate(bte, encodedatelength, MM, encodenumber);  <span class="comment">// ok</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; encodenumber + <span class="number">1</span>; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">byte</span>[] M = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span>];</div><div class="line">                MYSHA.GetMbyte(MM, M, encodenumber + <span class="number">1</span>,i);   <span class="comment">//ok</span></div><div class="line">                uint[] m = <span class="keyword">new</span> uint[<span class="number">16</span>];</div><div class="line">                MYSHA.Getmint(M, m, encodenumber + <span class="number">1</span>);    <span class="comment">//ok</span></div><div class="line">                uint[] W = <span class="keyword">new</span> uint[<span class="number">64</span>];</div><div class="line">                MYSHA.initialW(m, W, encodenumber + <span class="number">1</span>);</div><div class="line">                MYSHA.initialregister();</div><div class="line">                MYSHA.endcode(W, encodenumber + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">          MYSHA.printencode();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>。。。。</p>
]]></content>
      
        
        <tags>
            
            <tag> Program </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[10月->月末总结]]></title>
      <url>http://yan-1-20.github.io/2016/10/31/2016/10/31/</url>
      <content type="html"><![CDATA[<h1 id="10月-gt-月末总结"><a href="#10月-gt-月末总结" class="headerlink" title="10月-&gt;月末总结"></a>10月-&gt;月末总结</h1><h2 id="0x01-gt-感悟"><a href="#0x01-gt-感悟" class="headerlink" title="　0x01-&gt;感悟"></a>　0x01-&gt;感悟</h2><p>　　　　　这个月是复现cve的第一个月，跟着看了学习了不少知识，不得不说看着大牛的文章学到了很多，分为几个方面，一是调试器的使用，学到了很多新的用法，这是一起没有接触到的，二是这些新鲜的实战利用手法，这是只看二进制基础不可及的，三是对汇编编写、python、js（IE）这些感觉到欠缺,比如在改写虚表和改对象的结构使之rop化的运行等等。</p>
<h2 id="0x02-gt-windbg"><a href="#0x02-gt-windbg" class="headerlink" title="　0x02-&gt;windbg"></a>　0x02-&gt;windbg</h2><p>　　　　　windbg,我是这个月才开始学用，之前一直使用OD（ps:感觉做RE,OD的字符串插件比windbg的用户体验好多了），windbg 的符号功能的确很牛逼，命令行用多了也就记住了，然后就是mona插件，做二进制很强大的插件。</p>
<h3 id="0x02-01-gt-windbg-遇到的问题"><a href="#0x02-01-gt-windbg-遇到的问题" class="headerlink" title="　　0x02-01-&gt;windbg 遇到的问题"></a>　　0x02-01-&gt;windbg 遇到的问题</h3><p>　　　　　1.很多次符号路径莫名的被改变（至今也不知道为什么），导致一直在Busy <br><br><br>　　　　　2.如何快速定位到程序入口, bp $exentry 即可<br><br><br>　　　　　3.为何我的新打开或者附加一个程序会Busy* 很久，这是因为windbg在下载符号<br><br><br>　　　　　4.bp 符号,bm 符号，都不能断下来断点的话，可以先试试x 符号，得到地址，对地址进行断点<br><br><br>　　　　　5.自己编写的程序用windbg调试的时候，在进入main调试源代码的时候，我们的汇编单步会自动变成源码单步，使用 l-t 可以变成汇编单步 ，使用 l+t 变成源码单步<br><br>
　　　　　</p>
<h2 id="0x03-gt-IDA"><a href="#0x03-gt-IDA" class="headerlink" title="　0x03-&gt;IDA"></a>　0x03-&gt;IDA</h2><p>　　　　　IDA这个不用多说，用了很久了比较熟悉，</p>
<h3 id="0x03-01-gt-IDA6-8不能自动加载符号表的问题"><a href="#0x03-01-gt-IDA6-8不能自动加载符号表的问题" class="headerlink" title="　　0x03-01-&gt;IDA6.8不能自动加载符号表的问题"></a>　　0x03-01-&gt;IDA6.8不能自动加载符号表的问题</h3><p>　　　　　我百度到如下解决方法<br><br><br>　　　　　　　　　　原帖地址</p>
<blockquote>
<p><a href="http://www.cnblogs.com/Lnju/articles/5115370.html" target="_blank" rel="external">http://www.cnblogs.com/Lnju/articles/5115370.html</a></p>
</blockquote>
<p>修改ida安装目录下的pdb.cfg文件。<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// PDB plugin</div><div class="line"></div><div class="line">#ifdef __PC__                           // INTEL 80x86 PROCESSORS</div><div class="line">//</div><div class="line">// The downloaded symbols are stored in the specified directory.</div><div class="line">// Microsoft's public symbol store is used for downloading the symbols.</div><div class="line">//</div><div class="line">// If this option is omitted or empty  - use _NT_SYMBOL_PATH if set, otherwise use %TEMP%\ida directory</div><div class="line">// If the value is not empty           - use it</div><div class="line"></div><div class="line">//PDBSYM_DOWNLOAD_PATH    = "c:\\symbols";</div><div class="line"></div><div class="line">// Full symbol path (in _NT_SYMBOL_PATH format)</div><div class="line">// If set, PDBSYM_DOWNLOAD_PATH and _NT_SYMBOL_PATH are ignored</div><div class="line">PDBSYM_SYMPATH =</div><div class="line">//把下面这行的注释去掉，改成自己的本地符号路径就好了</div><div class="line">"SRV*e:\\sym*http://symbols.mozilla.org/firefox;SRV*c:\\symbols*http://msdl.microsoft.com/download/symbols";</div><div class="line"></div><div class="line">// remote server where win32_remote.exe is running</div><div class="line">// used when loading PDB symbols on non-Windows platforms</div><div class="line">// NB: it will be used only if there is not already an existing debugging session started</div><div class="line">PDB_REMOTE_SERVER = "localhost";</div><div class="line">PDB_REMOTE_PORT   = 23946</div><div class="line">// password for the remote server</div><div class="line">PDB_REMOTE_PASSWD = "";</div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure><br></p>
<h3 id="0x03-02-gt-IDA-遇上ASLR-怎么动静结合问题"><a href="#0x03-02-gt-IDA-遇上ASLR-怎么动静结合问题" class="headerlink" title="　　0x03-02-&gt;IDA 遇上ASLR 怎么动静结合问题"></a>　　0x03-02-&gt;IDA 遇上ASLR 怎么动静结合问题</h3><p>　　　　　IDA加载文件的时候选Manualload打勾.然后手动指定imagebase你可以看下你动态载入后的IMAGEBASE是多少先.然后把IDA的手工指定基址到中动态的那个基址。</p>
<h2 id="0x04-gt-Exploit"><a href="#0x04-gt-Exploit" class="headerlink" title="　0x04-&gt;Exploit"></a>　0x04-&gt;Exploit</h2><p>　　　　　这个月复现的cve,只有buffoverflow，Heap，都是溢出覆盖型基本利用手法就是<br><br>　　　　　1.找到溢出点，（heap，用gflag开堆页）<br><br>　　　　　2.查看模块的保护，找未开保护的模块，跳到其中去执行想要的gadget(确实不一定绕过DEP才用这种手法，很多情况都可以使用rop,比如自己构造对象,修改其虚函数，)<br>　　　　　3.由审计反汇编代码，查看是否有检查（输入数据）的地方，绕过其检查，保证程序正确执行<br>　　　　　4.由上面三步收集的信息,构造exploit</p>
<p>(╭￣3￣)╭♡<br><br>(╭￣3￣)╭♡<br><br>(╭￣3￣)╭♡<br></p>
]]></content>
      
        
        <tags>
            
            <tag> summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windbg 中使用kb和ub命令查看函数调用层次关系]]></title>
      <url>http://yan-1-20.github.io/2016/10/07/2016/10/7/</url>
      <content type="html"><![CDATA[<h1 id="kb-ub命令的作用"><a href="#kb-ub命令的作用" class="headerlink" title="kb,ub命令的作用"></a>kb,ub命令的作用</h1><p>  　　　　kb 显示传递给堆栈回溯中的每个函数的前三个参数<br><br>  　　　　ub 向前反汇编<br></p>
<h1 id="列子"><a href="#列子" class="headerlink" title="列子"></a>列子</h1><p><img src="/image/2016/10/07/2016-10-07-01.png" alt=""><br>　　　　　如图异常在30ed442c 这个地址，重新加载windbg，在这个地址下断<br><br>　　　　　断下来后，我们执行kb命令<br></p>
<p><img src="/image/2016/10/07/2016-10-07-02.png" alt=""><br>　　　　　mso!Ordinal1246+0x16b0表示当前指令的地址，则下面的表示调用当前指令<br><br>　　　　　的所在函数的<br>　　　　　对mso!Ordinal1273+0x2581执行我们的ub命令得到如下图<br><img src="/image/2016/10/07/2016-10-07-03.png" alt=""><br>　　　　　为什么是ub，相信你看了?  30f0b566 +5就明白了，所以这个<br><br>　　　　　mso!Ordinal1273+0x25d8(30f0b5c2)就是我们的调用当前函数的函数<br><br>　　　　　在这个30f0b5c2 下断点在次重新加载windbg<br><br><img src="/image/2016/10/07/2016-10-07-03.png" alt=""><br>　　　　　单步跟进，我们会看见这个call，这个call的地址，</p>
]]></content>
      
        
        <tags>
            
            <tag> windbg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全国网安高校联赛2016两道linux逆向的writeup]]></title>
      <url>http://yan-1-20.github.io/2016/08/29/2016/8/29/</url>
      <content type="html"><![CDATA[<h1 id="全国网安高校联赛2016两道linux逆向的writeup"><a href="#全国网安高校联赛2016两道linux逆向的writeup" class="headerlink" title="全国网安高校联赛2016两道linux逆向的writeup"></a>全国网安高校联赛2016两道linux逆向的writeup</h1><p>　　忏愧一下午就憋出了两道题<br><br>　　一道320分的　babyfuscator<br><br>　　一道192分的　indirect<br><br>　　这两道题indirect好像题目有问题最后加减i的时候位置反了，然后都没什么问题，babyfuscator是道体力活，indirect是道底层大题。<br><br>　　链接如下：<br><br>　　babyfuscator 　链接：<a href="http://pan.baidu.com/s/1i48aQ37" target="_blank" rel="external">http://pan.baidu.com/s/1i48aQ37</a> 密码：xiht<br><br>　　indirect　　　　链接：<a href="http://pan.baidu.com/s/1c131qKw" target="_blank" rel="external">http://pan.baidu.com/s/1c131qKw</a> 密码：q3br</p>
]]></content>
      
        
        <tags>
            
            <tag> RE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windbg 添加 mona]]></title>
      <url>http://yan-1-20.github.io/2016/08/22/2016/8/22/</url>
      <content type="html"><![CDATA[<p>　　Mona2是Corelan Team团队开发的一个非常有用的扩展(PS:读过Corelan Team的Exploit 编写系列教程应该不会陌生吧,看雪论坛里面有泉哥他们翻译的中文版),该扩展最初是为Immunity Debugger编写的,现在该扩展也有WinDbg的版本了.<br><br>下面的安装以win7 64位系统为例演示:<br><br></p>
<p>1.安装Python2.7<br><br>Python2.7下载地址:<br><br><a href="https://www.python.org/downloads/" target="_blank" rel="external">https://www.python.org/downloads/</a>)<br><br><br>2.安装vcredist_x64.exe (VC++运行库).<br></p>
<p>vcredist_x86.exe下载地址:<br> <a href="https://www.microsoft.com/en-us/download/details.aspx?id=29" target="_blank" rel="external">https://www.microsoft.com/en-us/download/details.aspx?id=29</a></p>
<p>vcredist_x64.exe下载地址:<br><br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=15336" target="_blank" rel="external">https://www.microsoft.com/en-us/download/details.aspx?id=15336</a><br><br><br><br>3.下载并安装让WinDbg支持python脚本的插件(按照自己的需要安装x86和x64版本的).<br></p>
<p>下载地址: <a href="http://pykd.codeplex.com/releases" target="_blank" rel="external">http://pykd.codeplex.com/releases</a><br><img src="/image/2016/08/22/2016-08-22-1.jpg" alt=""><br><br><br><br><br><img src="/image/2016/08/22/2016-08-22-2.jpg" alt=""><br><br><br><br><br><img src="/image/2016/08/22/2016-08-22-3.jpg" alt=""><br><br><br>zip解压之后得到几个dll 和一个pykd.pyd文件<br><img src="/image/2016/08/22/2016-08-22-4.jpg" alt=""><br><br><br>把pykd.pyd文件放入 windb的安装目录下的 winext文件下<br><br>然后 进入cmd  cd /d  xxxx（pykd的zip解压文件路径）<br><br>接着输入 regsvr32 msdia120.dll    （注意msdia120.dll是pykd 解压文件内的一个dll它的名字随pykd版本改变而改变 如上面的版本为msdia120.dll）</p>
<p>（注意！！在win7等有权限要求的系统，注册的时候要用管理员权限打开cmd,而且要注意windbg符号文件夹是否被创建，写符号文件路径的时候最好也是管理员权限运行）</p>
<p><br><br>注册成功后如图<br><img src="/image/2016/08/22/2016-08-22-5.jpg" alt=""></p>
<p>4．下载windbglib.py和mona.py,将其放到windbg.exe所在目录下.</p>
<p>下载地址: <a href="https://github.com/corelan" target="_blank" rel="external">https://github.com/corelan</a></p>
<p>5.配置符号文件路径如下:</p>
<p>①  选择菜单项File-&gt;Symbol File Path</p>
<p>②  输入:<br><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SRV*<span class="symbol">D:</span>\symbols*<span class="symbol">http:</span>/<span class="regexp">/msdl.microsoft.com/download</span><span class="regexp">/symbols</span></div></pre></td></tr></table></figure><br>上面的  D:\symbols 是自己想要的符号文件夹的路径<br></p>
<p>③  保存工作空间(选择菜单项File-&gt;Save Workspace)</p>
<p><br><br><br><br><br>/////////<br><br>说了这么多，我来个比较gay的，假如已经安装了python2.7，和下载windbglib.py和mona.py<br><br>你直接去: <a href="http://pykd.codeplex.com/releases" target="_blank" rel="external">http://pykd.codeplex.com/releases</a><br><br><img src="/image/2016/08/22/2016-08-22-6.png" alt=""><br>下载版本PYKD 0.2.0.29，选择pykd-0.2.0.29-x86-python-2.7-setup.exe(32位的)<br><br>这个玩意是一键安装的<br><br><br>　　　　　　　　　　　　(╭￣3￣)╭♡<br><br><br></p>
<p>#在WinDbg下使用mona.py</p>
<p>在WinDbg中运行mona.py非常简单:<br>先用windbg打开一个可执行文件打开 command 窗口 输入命令</p>
<p>.load pykd.pyd        ///（加载pykd扩展命令）<br><br>!py mona              </p>
<p><img src="/image/2016/08/22/2016-08-22-7.jpg" alt=""></p>
<p><br><br><br></p>
<p>再输入一句 更新语句<br><br><br>!py mona update</p>
<p><br><br>到此mnoa的安装完成</p>
]]></content>
      
        
        <tags>
            
            <tag> windbg </tag>
            
            <tag> Binary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windbg kb 命令解释]]></title>
      <url>http://yan-1-20.github.io/2016/08/18/2016/8/18/</url>
      <content type="html"><![CDATA[<p>　　windbg的kb命令执行后会得到如下的数据<br><br>　　<img src="/image/2016/08/18/kb.jpg" alt=""><br><br>　　同时源代码的函数调用如下图<br><br>　　<img src="/image/2016/08/18/c_code.jpg" alt=""><br><br>　　可以看出<br></p>
<p>0012fe7c 0040109d 0012ff28 00edf7ae 7ffda000 111!d<br><br>0040109d是函数 111!d 执行后最后ret的地址</p>
]]></content>
      
        
        <tags>
            
            <tag> windbg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubantu 常见问题解决]]></title>
      <url>http://yan-1-20.github.io/2016/07/04/2016/7/2/</url>
      <content type="html"><![CDATA[<p>ubantu 备份 system<br><br><a href="http://www.cnblogs.com/samael/articles/2033568.html" target="_blank" rel="external">http://www.cnblogs.com/samael/articles/2033568.html</a><br><br></p>
<p>install  notepadqq<br><br><a href="http://www.ubuntukylin.com/news/shownews.php?lang=cn&amp;id=356" target="_blank" rel="external">http://www.ubuntukylin.com/news/shownews.php?lang=cn&amp;id=356</a></p>
<p>install vmware<br><br><a href="https://linux.cn/article-2449-1.html" target="_blank" rel="external">https://linux.cn/article-2449-1.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PWN运动的工具准备]]></title>
      <url>http://yan-1-20.github.io/2016/06/28/2016/6/28/</url>
      <content type="html"><![CDATA[<p>pwn tools  install<br><br><a href="http://blog.csdn.net/koozxcv/article/details/51644476" target="_blank" rel="external">http://blog.csdn.net/koozxcv/article/details/51644476</a></p>
]]></content>
      
        
        <tags>
            
            <tag> -PWN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubantu和windows10 双系统下问题解决]]></title>
      <url>http://yan-1-20.github.io/2016/06/16/2016/6/22/</url>
      <content type="html"><![CDATA[<p>#ubantu和windows10 双系统下问题解决<br>最近装了ubantu，但是双系统的麻烦也来了<br>1.windows和ubantu的时区冲突两个系统时间差了8小时<br>2.unbantu下没有声音</p>
<p>解决方法<br>1.<br>时区不对怎么办<br>下面的命令可以关闭UTC，<br>代码:<br>sudo timedatectl set-local-rtc 1</p>
<p>2.<br>耳机没声音怎么办<br>2.运行<br>代码:<br>sudo mousepad /etc/modprobe.d/options<br>在其中加入<br>options snd-hda-intel model=z71v position_fix=1<br>保存，退出。</p>
]]></content>
      
        
        <tags>
            
            <tag> -linux </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
